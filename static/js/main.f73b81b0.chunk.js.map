{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","datalist","state","confirmed","active","recovered","deaths","CardList","datalists","map","key","statecode","Search","onhandle","placeholder","type","onChange","App","handleChange","e","setState","searchField","target","value","fetch","then","response","json","data","statewise","this","dataFilter","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+TAiBeA,G,kBAdK,SAACC,GACjB,OACA,+BACI,4BACI,wBAAIC,UAAU,SAASD,EAAME,SAASC,OACtC,wBAAIF,UAAU,aAAaD,EAAME,SAASE,WAC1C,wBAAIH,UAAU,UAAUD,EAAME,SAASG,QACvC,wBAAIJ,UAAU,aAAaD,EAAME,SAASI,WAC1C,wBAAIL,UAAU,UAAUD,EAAME,SAASK,YCgBpCC,EAvBS,SAACR,GACrB,OACI,6BACF,2BAAOC,UAAU,cACf,+BACI,qCACA,yCACA,sCACA,yCACA,wCAIFD,EAAMS,UAAUC,KAAI,SAAAR,GAAQ,OACxB,kBAAC,EAAD,CAAMS,IAAKT,EAASU,UAAWV,SAAYA,SCHzCW,G,MAZM,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,SAASC,EAAiB,EAAjBA,YAC7B,OAEI,2BACEd,UAAU,SACVe,KAAK,SACLD,YAAaA,EACbE,SAAUH,MC6BLI,EAlCf,kDACE,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAaRmB,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbvC,EAAKrB,MAAQ,CACXM,UAAY,GACZa,YAAc,IAJC,EADrB,gEASuB,IAAD,OAClBG,MAAM,0CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAI,OAAI,EAAKR,SAAS,CAACZ,UAAYoB,EAAKC,iBAZnD,+BAmBY,IAAD,EAC2BC,KAAK5B,MAAhCM,EADA,EACAA,UAAWa,EADX,EACWA,YACZU,EAAavB,EAAUwB,QAAO,SAAA/B,GAAQ,OAAIA,EAASC,MAAM+B,cAAcC,SAASb,EAAYY,kBAClG,OACE,yBAAKjC,UAAU,OACb,6CACA,kBAAC,EAAD,CAAQa,SAAUiB,KAAKZ,aAAcJ,YAAY,iBAGjD,kBAAC,EAAD,CAAUN,UAAauB,SA5B/B,GAAyBI,aCOLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f73b81b0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n    <table>\r\n        <tr>\r\n            <th className='state'>{props.datalist.state}</th>\r\n            <th className='confirmed'>{props.datalist.confirmed}</th>\r\n            <th className='active'>{props.datalist.active}</th>\r\n            <th className='recovered'>{props.datalist.recovered}</th>\r\n            <th className='deaths'>{props.datalist.deaths}</th>\r\n        </tr>\r\n    </table>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport './card-list.style.css'\r\nimport Card from '../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div>\r\n      <table className='table-head'>\r\n        <thead >\r\n            <th>State</th>\r\n            <th>Confirmed</th>\r\n            <th>Active</th>\r\n            <th>Recovered</th>\r\n            <th>Deaths</th>\r\n        </thead>\r\n     </table>\r\n        {\r\n          props.datalists.map(datalist => (\r\n              <Card key={datalist.statecode} datalist = {datalist}>\r\n                    \r\n              </Card>\r\n          ))\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default CardList\r\n","import React from 'react'\r\nimport './search.style.css'\r\n\r\nexport const Search = ({onhandle,placeholder}) => {\r\n    return (\r\n\r\n        <input \r\n          className='search'\r\n          type='search' \r\n          placeholder={placeholder} \r\n          onChange={onhandle}\r\n        />\r\n    )\r\n}\r\n\r\nexport default  Search","import React, { Component } from 'react'\nimport './App.css'\nimport CardList from './components/card-list/card-list.component'\nimport Search from './components/search/search.component.jsx'\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      datalists : [],\n      searchField : '' \n    }\n  }\n  \n  componentDidMount() {\n    fetch(\"https://api.covid19india.org/data.json\")\n    .then(response => response.json())\n    .then( data => this.setState({datalists : data.statewise}) )\n  }\n\n  handleChange = (e) => {\n      this.setState({searchField: e.target.value})\n  }\n\n  render() {\n    const {datalists, searchField}  = this.state\n    const dataFilter = datalists.filter(datalist => datalist.state.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className='App'>\n        <h1>Covid19 India</h1>\n        <Search onhandle={this.handleChange} placeholder=\"search state\">\n\n        </Search>\n        <CardList datalists = {dataFilter}></CardList>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}